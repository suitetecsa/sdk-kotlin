package io.github.suitetecsa.sdk.nauta.api

import io.github.suitetecsa.sdk.nauta.model.captcha.CaptchaResponse
import io.github.suitetecsa.sdk.nauta.model.login.LoginRequest
import io.github.suitetecsa.sdk.nauta.model.login.LoginResponse
import io.github.suitetecsa.sdk.nauta.model.users.UsersRequest
import io.github.suitetecsa.sdk.nauta.model.users.UsersResponse
import io.github.suitetecsa.sdk.nauta.utils.NautaUtils
import io.reactivex.rxjava3.core.Single
import retrofit2.http.Body
import retrofit2.http.GET
import retrofit2.http.Header
import retrofit2.http.Headers
import retrofit2.http.POST

/**
 * NautaServiceRx interface defines methods for interacting with the Nauta service
 * through HTTP operations for operations such as CAPTCHA retrieval, user login,
 * and user data management. Each method returns a reactive `Single` type, suitable
 * for RxJava operations.
 */
interface NautaServiceRx {
    /**
     * Retrieves a CAPTCHA challenge from the server.
     *
     * This method sends a GET request to fetch a CAPTCHA response that includes an identifier
     * and the associated CAPTCHA data. The response is encapsulated in a `CaptchaResponse` object.
     *
     * @return A `Single` emitting the CAPTCHA response data wrapped in a `CaptchaResponse` object.
     */
    @Headers("User-Agent: SuitETECSA/1.0.0", "Content-Type: application/json")
    @GET("/captcha/captcha?")
    fun getCaptcha(): Single<CaptchaResponse>

    /**
     * Sends a login request to the Nauta service.
     *
     * This method performs a POST request to authenticate a user using the provided login credentials.
     *
     * @param loginRequest The login request containing user credentials and additional authentication data.
     * @return A `Single<LoginResponse>` emitting the response from the authentication process,
     *         which includes the authentication token, user information, and login result.
     */
    @Headers("User-Agent: SuitETECSA/1.0.0", "Content-Type: application/json")
    @POST("/login")
    fun login(@Body loginRequest: LoginRequest): Single<LoginResponse>


    /**
     * Sends a POST request to manage or retrieve user-related data.
     *
     * This method requires authentication via a token and may include a generated API key
     * as an additional header. The request is constructed with the specified user information
     * provided in the request body.
     *
     * @param authorization The authorization token for the request, typically in the format "Bearer <token>".
     * @param userRequest The user request object containing the necessary user-related data.
     * @param passwordApp An optional header containing a generated API key in the format "ApiKey <hash>".
     *                    Defaults to a value generated by `NautaUtils.createPasswordApp()`.
     * @return A `Single<UsersResponse>` emitting the response containing user-related data encapsulated in a
     * `UsersResponse` object.
     */
    @Headers(
        "User-Agent: SuitETECSA/1.0.0",
        "Content-Type: application/json",
        "usernameApp: portal",
    )
    @POST("/users")
    fun users(
        @Header("Authorization") authorization: String,
        @Body userRequest: UsersRequest,
        @Header("passwordApp") passwordApp: String = NautaUtils.createPasswordApp()
    ): Single<UsersResponse>
}
